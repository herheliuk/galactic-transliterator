#!/usr/bin/env python3

language_map = {
    'ENGLISH_TO_SURZHYK': {
        'a': "–∞", 'b': "–±", 'd': "–¥", 'e': "–µ", 'f': "—Ñ", 'g': "–≥", "g'": "“ë",
        'h': "—Ö", 'i': "–∏", 'yi': '—ó', 'j': "–π", 'k': "–∫", 'l': "–ª", 'm': "–º",
        'n': "–Ω", 'o': "–æ", 'p': "–ø", 'r': "—Ä", 's': "—Å", 't': "—Ç", 'u': "—É",
        'v': "–≤", 'y': "—ã", 'z': "–∑", '#': '—ä', 'yo': '—ë', 'je': '—î',
        'zh': '–∂', 'ch': '—á', 'sh': '—à', 'shch': '—â', 'ye': '—ç', 'yu': '—é',
        'ya': '—è', "'": '—å', "ts": "—Ü", "tsya": '—Ç—Å—è',

        'w': '—É', 'c': '–∫', 'x': '–∫—Å', 'q': '–∫—É', "ph": '—Ñ', 'kn': '–Ω', 'oo': '—É'
    },
    'SURZHYK_TO_ENGLISH': {
        '–∞': 'a', '–±': 'b', '–¥': 'd', '–µ': 'e', '—Ñ': 'f', '–≥': 'g', '“ë': "g'",
        '—Ö': 'h', '–∏': 'i', '—ó': 'yi', '–π': 'j', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '–≤': 'v', '—ã': 'y', '–∑': 'z', '—ä': '#', '—ë': 'yo', '—î': 'je', '–∂': 'zh',
        '—á': 'ch', '—à': 'sh', '—â': 'shch', '—ç': 'ye', '—é': 'yu', '—è': 'ya',
        '—å': "'", '—Ü': 'ts', '—Ç—Å—è': 'tsya'
    },
    'ENGLISH_TO_GALACTIC': {
        'a': "·îë", 'b': " ñ", 'c': "·ìµ", 'd': "‚Ü∏", 'e': "·í∑", 'f': "‚éì", 'g': "‚ä£",
        'h': "‚çë", 'i': "‚ïé", 'j': "‚ãÆ", 'k': "Íñå", 'l': "Íñé", 'm': "·í≤", 'n': "„É™",
        'o': "ùôπ", 'p': "!¬°", 'q': "·ëë", 'r': "‚à∑", 's': "·ì≠", 't': "‚Ñ∏", 'u': "‚öç",
        'v': "‚çä", 'w': "‚à¥", 'x': "Ãá/", 'y': "||", 'z': "‚®Ö"
    }
}

def transliterate(translated_text, mode):
    translated_text = translated_text.lower()

    global language_map
    if not mode in language_map:
        source_language, target_language = mode.split('_TO_')
        reversed_mode = f"{target_language}_TO_{source_language}"
        language_map[mode] = {value:key for key, value in language_map[reversed_mode].items()}

    _map = language_map[mode]

    for key in sorted(_map.keys(), key=len, reverse=True):
        translated_text = translated_text.replace(key, _map[key])
    
    return translated_text

# UI beyond this point

if __name__ == "__main__":
    import tkinter as tk

    root = tk.Tk()
    root.title("Galactic Transliterator ü™ê")
    root.geometry("600x450")
    root.minsize(350, 250)
    root.resizable(True, True)

    root.grid_columnconfigure(1, weight=1)
    for i in range(3):
        root.grid_rowconfigure(i, weight=1)

    def make_text_area(parent):
        frame = tk.Frame(parent)
        frame.grid(sticky='nsew')

        text = tk.Text(frame, wrap='word', undo=True)
        text.grid(row=0, column=0, sticky='nsew')

        scrollbar = tk.Scrollbar(frame, command=text.yview)
        scrollbar.grid(row=0, column=1, sticky='ns')

        text.config(yscrollcommand=scrollbar.set)

        frame.grid_rowconfigure(0, weight=1)
        frame.grid_columnconfigure(0, weight=1)

        return frame, text

    english_label = tk.Label(root, text="English")
    english_label.grid(row=0, column=0, padx=10, pady=10, sticky='n')
    english_frame, english_input = make_text_area(root)
    english_frame.grid(row=0, column=1, padx=10, pady=10, sticky='nsew')

    surzhyk_label = tk.Label(root, text="Surzhyk")
    surzhyk_label.grid(row=1, column=0, padx=10, pady=10, sticky='n')
    surzhyk_frame, surzhyk_input = make_text_area(root)
    surzhyk_frame.grid(row=1, column=1, padx=10, pady=10, sticky='nsew')

    galactic_label = tk.Label(root, text="Galactic")
    galactic_label.grid(row=2, column=0, padx=10, pady=10, sticky='n')
    galactic_frame, galactic_input = make_text_area(root)
    galactic_frame.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

    # UI Functionality

    def read_field(input):
        return input.get("1.0", tk.END).strip()

    def update_field(input, text):
        input.delete("1.0", tk.END)
        input.insert(tk.END, text)

    def auto_transliterate(event):
        if event.widget == surzhyk_input:
            surzhyk_text = read_field(surzhyk_input)
            update_field(
                english_input,
                transliterate(surzhyk_text, mode='SURZHYK_TO_ENGLISH')
            )
            english_text = read_field(english_input)
            update_field(
                galactic_input,
                transliterate(english_text, mode='ENGLISH_TO_GALACTIC')
            )
        elif event.widget == english_input:
            english_text = read_field(english_input)
            update_field(
                galactic_input,
                transliterate(english_text, mode='ENGLISH_TO_GALACTIC')
            )
            update_field(
                surzhyk_input,
                transliterate(english_text, mode='ENGLISH_TO_SURZHYK')
            )
        elif event.widget == galactic_input:
            galactic_text = read_field(galactic_input)
            update_field(
                english_input,
                transliterate(galactic_text, mode='GALACTIC_TO_ENGLISH')
            )
            english_text = read_field(english_input)
            update_field(
                surzhyk_input,
                transliterate(english_text, mode='ENGLISH_TO_SURZHYK')
            )

    def select_all(event):
        event.widget.tag_add("sel", "1.0", "end-1c")
        return "break"
    
    def custom_paste(event):
        _input = event.widget
        try:
            sel_start = _input.index("sel.first")
            sel_end = _input.index("sel.last")
            full_text = _input.get("1.0", "end-1c")
            selected_text = _input.get(sel_start, sel_end)

            if selected_text == full_text:
                _input.delete("1.0", "end")
                clipboard_text = root.clipboard_get()
                _input.insert("1.0", clipboard_text)
        except:
            clipboard_text = root.clipboard_get()
            _input.insert(tk.INSERT, clipboard_text)
        return "break"

    surzhyk_input.bind("<KeyRelease>", auto_transliterate)
    english_input.bind("<KeyRelease>", auto_transliterate)
    galactic_input.bind("<KeyRelease>", auto_transliterate)

    surzhyk_input.bind("<FocusIn>", auto_transliterate)
    english_input.bind("<FocusIn>", auto_transliterate)
    galactic_input.bind("<FocusIn>", auto_transliterate)
    
    surzhyk_input.bind("<Control-a>", select_all)
    english_input.bind("<Control-a>", select_all)
    galactic_input.bind("<Control-a>", select_all)

    surzhyk_input.bind("<Control-v>", custom_paste)
    english_input.bind("<Control-v>", custom_paste)
    galactic_input.bind("<Control-v>", custom_paste)

    surzhyk_input.bind("<Control-z>", lambda e: surzhyk_input.edit_undo())
    english_input.bind("<Control-z>", lambda e: english_input.edit_undo())
    galactic_input.bind("<Control-z>", lambda e: galactic_input.edit_undo())
    
    surzhyk_input.focus_set()

    root.mainloop()
